{
  "name": "reflux-state-mixin",
  "version": "0.5.0",
  "description": "Reflux stores mixin adding 'state' syntax similar to React components. es6 classes supported",
  "main": "lib/index.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yonatanmn/reflux-state-mixin.git"
  },
  "keywords": [
    "reflux",
    "mixin",
    "model",
    "mvc",
    "state",
    "store",
    "event",
    "events",
    "connect",
    "es6 classes",
    "decorator"
  ],
  "author": {
    "name": "Yonatan Schreiber",
    "email": "yonatnamn@gmail.com"
  },
  "license": "ISC",
  "dependencies": {},
  "peerDependencies": {
    "reflux": ">=0.2.5 <0.4.0"
  },
  "homepage": "https://github.com/yonatanmn/reflux-state-mixin",
  "readme": "# reflux-state-mixin\r\n\r\nMixin for [reflux](https://www.npmjs.com/packages/reflux) stores to enable them to have `state`, `setState()`, and `getInitialState()`, similar to React components. \r\n\r\n\r\n## Usage\r\n\r\n```javascript\r\n\r\n// myStore.js\r\nvar Reflux = require('reflux');\r\nvar StateMixin = require('reflux-state-mixin')(Reflux); //call this mixin like that\r\nvar Actions = require('./../actions/AnimalsActions'); \r\n\r\nvar AnimalStore = module.exports = Reflux.createStore({\r\n  mixins: [StateMixin],\r\n  listenables: Actions, //or any other way of listening... \r\n\r\n  getInitialState(){      \r\n    return{\r\n      dogs:5,\r\n      cats:3\r\n    }\r\n  },\r\n\r\n  onNewDogBorn: function() {\r\n        this.setState({dogs:this.state.dogs+1})  \r\n        //just like in a Component.\r\n        //this will `trigger()` this state, similar to `render()` in a Component \r\n  }\r\n\r\n});\r\n```\r\n### in component:\r\n#### 1:\r\n```javascript\r\n\r\nvar AnimalStore = require('./AnimalStore.js');\r\n\r\nvar DogsComponent = React.createClass({\r\n    mixins:[Reflux.ListenerMixin],\r\n    getInitialState: function (){\r\n      return({\r\n          dogs:AnimalStore.state.dogs \r\n          //Treat store.state as immutable data - same as you treat component.state - \r\n          //you could use it inside a component, but never change it's value - only with setState()    \r\n      })\r\n    },\r\n    componentDidMount: function(){\r\n        this.listenTo(AnimalStore.dogs,this.updateDogs); \r\n        //this Component has no internest in `cats` or any other animal, so it listents to `dogs` changes only\r\n    },\r\n    updateDogs: function(dogs){\r\n        this.setState({dogs:dogs});\r\n        //now we have auto-synchronization with `dogs`, with no need for specific logic for that\r\n    },\r\n    render: function () {\r\n        return (<div><p>We have {this.state.dogs} dogs</p></div>);\r\n    }\r\n});\r\n\r\n```\r\n#### 2. listen to an entire store:\r\n\r\n```javascript\r\nvar AnimalStore = require('./AnimalStore.js');\r\n\r\nvar PetsComponent = React.createClass({\r\n    mixins:[Reflux.ListenerMixin],\r\n    getInitialState: function (){\r\n      return({\r\n          dogs: AnimalStore.state.dogs,\r\n          cats: AnimalStore.state.cats\r\n      })\r\n    },\r\n    componentDidMount: function(){\r\n         this.listenTo(\r\n            AnimalStore,\r\n            (state)=>{\r\n                this.setState({\r\n                    dogs:state.dogs,\r\n                    cats:state.cats\r\n                })\r\n            });\r\n         //this way the component can easily decide what parts of the store-state are interesting\r\n    },\r\n\r\n    render: function () {\r\n        return (<div><p>We have {this.state.dogs + this.state.cats} pets</p></div>);\r\n    }\r\n})\r\n```\r\n#### 3. connect:\r\n\r\n```javascript\r\nvar AnimalStore = require('./AnimalStore.js');\r\nvar StateMixin = require('reflux-state-mixin')(Reflux);\r\n\r\nvar PetsComponent = React.createClass({\r\n    mixins:[\r\n        StateMixin.connect(AnimalStore, 'dogs')\r\n        //OR\r\n        StateMixin.connect(AnimalStore) //now PetsComponent.state === AnimalStore.state\r\n        ],\r\n\r\n    render: function () {\r\n        return (<div><p>We have {this.state.dogs} dogs</p></div>);\r\n    }\r\n})\r\n```\r\n## Installation\r\n\r\n```bash\r\n$ npm install reflux-state-mixin --save\r\n```\r\n\r\n## some details\r\n`GetInitialState()` in store should have all of the states from the beginning.  \r\n`setState()` is checking to see if there is a difference between new `state.key` from current `state.key`. If not, this specific `state.key` it's not triggering.\r\nFor any `setState()` the entire store is triggering (regardless of changes), allowing any Component or other Store to listen to the entire Store's state.\r\n\r\n## acknowledgments\r\nThis mixin is combination of two other mixins - \r\n[triggerables-mixin](https://github.com/jesstelford/reflux-triggerable-mixin), a really useful mixin for controlling the trigger of the stores. Also see [this](https://github.com/spoike/refluxjs/issues/158) for details. \r\nAnd [state-mixin](https://github.com/spoike/refluxjs/issues/290) \r\n\r\nI thank @jehoshua02 and @jesstelford for their valuable code. \r\n",
  "readmeFilename": "README.md",
  "gitHead": "ae16010877075dd1815af3ca88fe5c2e0b5efc58",
  "bugs": {
    "url": "https://github.com/yonatanmn/reflux-state-mixin/issues"
  },
  "scripts": {
    "compile": "babel --presets react,es2015,stage-0 -d lib/ src/"
  },
  "devDependencies": {
    "babel-cli": "^6.2.0",
    "babel-preset-es2015": "^6.1.18",
    "babel-preset-react": "^6.1.18",
    "babel-preset-stage-0": "^6.1.18"
  }
}
